<%- include('../required/header.ejs') %>


<style>
    tr.disabled-row {
    background-color: rgba(255, 75, 19, 0.1); /* Set the background color for disabled rows */
    color: #ffffff; /* Set the text color for disabled rows */
  }

#block11 .shadow-box {
  box-shadow: 0px 3px 10px #cfcfcf; /* adds a box shadow */
  height: 78px;
  background-color: #ffffff; /* sets the background color */
  border-radius: 5px; /* rounds the corners */
  margin: -.8rem 0 0 2.3rem;
  width: 101%;
}
#block11 .shadow-box1 {
  box-shadow: 0px 3px 10px #cfcfcf;/* adds a box shadow */
  height: auto;
  background-color: #ffffff; /* sets the background color */
  border-radius: 5px; /* rounds the corners */
  margin: 20px 0 0 2.3rem;
  width: 101%;
}

#block11 .mar {
  margin-top: 14px;
}
#block11 {
  width: 97.5%;
  padding-top: 88px;
}
#block11 .status {
  font-size: 14px;
  padding-top: 2rem;
  margin-left: 6%;
  color: #4f4f4f;
}

#block11 .icon {
  color: #ff4b13;
  font-size: 24px;
  position: absolute;
  margin-left: 6%;
  opacity: 90%;
}
#block11 .bname {
  margin-left: 16%;
  font-weight: 500;
  width: 200px;
  letter-spacing: 0.1em;
  color: #4f4f4f;
}
#block11 .block-details {
  margin-top: -0.2rem;
}
#block11 .edit-icon {
  color: #ff4b13;
  font-size: 24px;
  margin-top: -2rem;
  margin-left: 70%;
  position: absolute;
  opacity: 90%;
}
#block11 .trash-icon {
  color: #ff4b13;
  font-size: 24px;
  margin-top: -2rem;
  margin-left: 80%;
  position: absolute;
  opacity: 90%;
}
#block11 .room-number {
  color: #ff4b13;
  font-weight: bold;
  margin-left: 2rem;
  opacity: 90%;
}
.room-total {
  margin-top: -3rem;
  color: #4f4f4f;
  font-size: 14px;
  margin-left: 15px;
}

#block11 .room-details {
  margin-left: 16%;
}
#block11 .student-details {
  position: absolute;
  margin-top: -5rem;
  margin-left: 55%;
  padding-right: 5px;
}
#block11 .tot {
  text-align: left;
  color: #4f4f4f;
  font-size: 14px;
  margin-left: 15px;
}
#block11 .button {
  width: 40%;
  height: 40px;
  margin-left: 30%;
  background-color: #ff4b13;
  color: #ffffff;
  font-weight: 100;
  font-size: 14px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  opacity: 90%;

}
#block11 .button2:active, #block11 .button2:focus {
  outline:none;
  border:none;

}
#block11 .button2:hover{
outline:none;
}
#block11 .button2 {
  width: 200px;
  height: 45px;
  right: 0px;
  position: absolute;
  margin-top: -3.6rem;
  background-color: #ff4b13;
  color: #ffffff;
  font-weight: 100;
  font-size: 14px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  opacity: 90%;
}

#block11 .visit:active, #block11 .visit:focus {
  outline:none;
  border:none;

}
#block11 .visit:hover{
outline:none;
}
#block11 .visit {
  width: 200px;
  height: 45px;
  right: 0px;
  margin-top: -3.6rem;
  margin-left: 1rem;
  background-color: #ff4b13;
  color: #ffffff;
  font-weight: 100;
  font-size: 14px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  opacity: 90%;
}


#block11 .view {
  padding-top: 0.1rem;
}
#block11 .button:focus {
  outline: none;
}

#block11 .add {
  width: 103%;
}
#block11 .view {
  margin-top: 9px;
}

#block11 .form-select {
  border-color: #ff4b13;
  color: #4f4f4f;
  padding: 6px 12px;
  border-radius: 5px;
  opacity: 90%;
  width:100px;
  margin-top:-2.3rem;
  margin-left:7rem;
}

#block11 .form-select option:hover {
  background-color: #ff4b13;
  color: #4f4f4f;
  opacity: 90%;
}

#block11 .pre {
  margin-left: 3%;
  color: #ff4b13;
  opacity: 90%;
}
#block11 .form-group {
  margin-left: 3%;
  margin-top:2rem;
}
#block11 .table {
  margin-top: 1rem;
  width: 95%;
  margin-left: 2%;
  color: #4f4f4f;
  border-spacing:0;

}

#block11 .table td,
#block11 .table th {
  padding: 0.75rem;
  vertical-align: top;
  border-top: 1px solid #e3e6f0;
  overflow-y:auto;
  overflow-x:auto;
}

#block11 .table thead th {
  vertical-align: bottom;
  border-bottom: 2px solid #e3e6f0;
}
#block11 .pdf {
  width: 147px;
  height: 40px;
  color: #ff4b13;
  border-radius: 5px;
  position: absolute;
  background: #ff4a131e;
  right: 0.4rem;
  margin-top: -2.3rem;
}
#block11 .pdf {
  border: 1px solid #ff4b13;
  opacity: 90%;
}
#block11 .pdff {
  color: #ff4b13;
  font-size: 24px;
  margin-top: -3.1rem;
  right: 1rem;
  position: absolute;
}
@media (max-width: 575.7px) {
  #block11 .add {
    margin-top: 15px;
    width: 80%;
  }
  @media (max-width: 733px)
  {
    #block11 .shadow-box1 {
    width: 103%;
  }
  #block11 .shadow-box {
    width: 103%;
    height: 65px;
  }

  .form-select {
    padding: 4px 4px 4px px;
    border-radius: 3px;
    font-size: 12px;

  }

  .pre {
    margin-left: 5%;
  }
  .form-group {
    margin-left: 5%;
    font-size: 14px;
    margin-top: -20px;

  }
  .table {
    margin-top: 1rem;
    width: 95%;
    margin-left: 2%;
    opacity: 90%;
    font-size: 14px;
  }
  #block11 .form-select {
  border-color: #ff4b13;
  color: #4f4f4f;
  padding: 6px 12px;
  border-radius: 5px;
  opacity: 90%;
  width:80px;
  margin-top:-2.1rem;
margin-left:4.9rem;
}

  .table td,
  .table th {
    font-size: 14px;
    padding: 0.75rem;
    vertical-align: top;
    border-top: 1px solid #e3e6f0;
  }

  .table thead th {
    vertical-align: bottom;
    border-bottom: 2px solid #e3e6f0;
  }
  #block11 .button2 {
    width: 140px;
    height: 35px;
    right: -20px;
    margin-top: -3.1rem;

    font-size: 12px;
  }
  #block11 .view {
    margin-top: 0.4rem;
  }

  }
}
.failed{
    border-radius: 15px;
    margin-top: 15px;
}
.success {
  color: rgba(0,143,32);
  box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.2);
  padding:1.5rem 5rem;
  border-radius:30px 0 30px 0;
}
.success .toastify-text {
  border-bottom: 2px solid #00b894;
}
.failed, .error{
	  color: rgba(215, 42, 42);
	padding:1.5rem 5rem;
  margin-top:0rem;
	border-radius:30px 0 30px 0;
}
.descrip{
display:flex;
  flex-direction:row;
  gap:1rem;
margin:0 aut;

border-radius:5px;
}
.deshea{
color:#ff4b13;
}

.swal2-popup .swal2-styled.swal2-cancel {
      border: 1px solid #ff4b13;
			color:#ff4b13;
			padding-right:2rem;

			padding-left:2rem; /* Set the border properties as per your requirement */
			margin-bottom:2rem;
    }

		.swal2-popup .swal2-styled.swal2-confirm {
					padding-right:2rem;
					padding-left:2rem; /* Set the border properties as per your requirement */
          margin-top:-1.3rem;
    }
    .error {
  border-color: red;
}

 </style>

<main>
  <main id="block11">
    <div class="row" >
      <div class="col-lg-12 col-md-12 col-sm-12 block1 mar">
        <div class="shadow-box">
          <div class="form-group pt-2">
            <label for="exampleSelect" class="mt-3">Select year:</label>
            <select class="form-select" id="yearSelect">
              <option value="" disabled selected>year</option>
              <% for(var i = 0; i < Acad.length; i++) { %>
                <option value="<%= Acad[i].Year %>"><%= Acad[i].Year %></option>
              <% } %>
            </select>

          </div>
          <button class="button2 text-center" id="createAcademicYearBtn"><p class="view view1">Create academic year</p></button>
        </div>
      </div>
      <div class="col-lg-12 col-md-12 col-sm-12 block1">

        <div class="shadow-box1">
          <br><br>

         <br>
          <h6 class="pre">Previous allocation</h6>

          <a class="" href="" style="cursor:pointer;">
            <button id="downloadBtn" onclick="exportPdf()" class="pdf text-left" style="outline: none;" >
                    <p  class="download mt-2 ml-3">Download</p>
                    <i class="fa fa-file-pdf-o pdff" aria-hidden="true" style="padding-top: 8px;"></i>
            </button>
          </a>
          <br>

          <div class="col-lg-12 col-md-12 col-sm-12" id="tblCustomers">
            <div class="descrip justify-content-center" >
              <h4 class="deshea font-weight-bold text-uppercase pb-4" id="descriptionElement">
              </h4>
            </div>

            <div class="table-responsive">
              <button id="continueAllocationBtn"  class="visit text-center" style="margin-top: 30px;" disabled>
                <p class="view view1">Continue Allocation</p>
              </button>
             <%- include('./table.ejs') %>
              <hr>
              <br>
            </div>
          </div>

        </div>
      </div>
    </div>
  </main>
</main>

<br>


<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.22/pdfmake.min.js"></script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>



<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<script>
  document.getElementById('createAcademicYearBtn').addEventListener('click', function() {
  Swal.fire({
    html: `
      <h5 class="mt-4 font-weight-bold pb-3" style="margin-bottom: font-weight:bold; color:#ff4b13; 30px">Academic Year</h5>
      <form>
        <div class="form-group">
          <div class="input-box">
            <label class="input-label">Academic year</label>
            <input type="text" class="input-1" onfocus="setFocus(true)" id="acadyear" onblur="validateInput()" style="color:#4f4f4f; border-color:#4f4f4f; font-size:16px;" />
            <span id="error-msg" style="color: red;"></span>
          </div>

          <div class="input-box">
            <label class="input-label">Description</label>
            <input type="textarea" class="input-1" onfocus="setFocus(true)" id="description" onblur="setFocus(false)" style="color:#4f4f4f; border-color:#4f4f4f; font-size:16px;" />
          </div>
        </div>
      </form>
    `,
    showCancelButton: true,
    showConfirmButton: true,
    confirmButtonColor: "#ff4b13",
    cancelButtonColor: "#ffffff",
    confirmButtonText: "Create",
    preConfirm: () => {
      const year = document.getElementById('acadyear').value;
      const description = document.getElementById('description').value;

      if (!isValidYear(year)) {
        document.getElementById('error-msg').textContent = 'Please enter a valid 4-digit year.';
        document.getElementById('acadyear').classList.add('error');
        return null; // Return null to prevent data submission
      } else {
        return { year, description };
      }
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const { year, description } = result.value;
      console.log(`${description}`);

      if (year !== null) {
        // Proceed with data submission if year is not null
        fetch("/year/api/years", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ year, description }),
        })
          .then((response) => {
            if (response.ok) {
              return response.json();
            } else if (response.status === 422) {
              throw new Error(`Already have allocation for ${year}`);
            } else if (response.status === 500) {
              throw new Error(`Please enter details`);
            }
          })
          .then((data) => {
            console.log(data);
            // Handle success
            Toastify({
              text: "Academic year successfully created",
              backgroundColor: "rgba(0,143,32,.2)",
              className: "success",
              position: "top-center",
            }).showToast();
            const url = `/year/create-allocations?year=${encodeURIComponent(year)}`;
            window.location.href = url;
          })
          .catch((error) => {
            console.log("Error:", error.message);
            // Handle error
            Toastify({
              text: `${error.message}`,
              duration: 3000,
              gravity: "top",
              position: "center",
              className: "failed",
              backgroundColor: "rgba(243,209,209,1)",
              stopOnFocus: true,
              onClick: function () {
                Toastify.hideAll();
              },
            }).showToast();
          });
      }
    }
  });
});

function validateInput() {
  var input = document.getElementById('acadyear').value;
  var pattern = /^\d{4}$/;

  if (!pattern.test(input)) {
    document.getElementById('error-msg').textContent = 'Please enter a valid 4-digit year.';
    document.getElementById('acadyear').classList.add('error');
  } else {
    document.getElementById('error-msg').textContent = '';
    document.getElementById('acadyear').classList.remove('error');
  }
}

function isValidYear(year) {
  var pattern = /^\d{4}$/;
  return pattern.test(year);
}



</script>

<script>

yearSelect.addEventListener("change", () => {
  const selectedYear = yearSelect.value;
  const continueAllocationBtn = document.getElementById("continueAllocationBtn");
  
  if (selectedYear) {
    continueAllocationBtn.disabled = false;
  } else {
    continueAllocationBtn.disabled = true;
  }
});


  document.getElementById('continueAllocationBtn').addEventListener('click', function() {
  const selectedYear = yearSelect.value;
  const url = `/year/create-allocations?year=${encodeURIComponent(selectedYear)}`;
  window.location.href = url;
});


</script>

<script>
  function setFocus(on) {
            var element = document.activeElement;
            if (on) {
                setTimeout(function () {
                element.parentNode.classList.add("focus");
                });
            } else {
                let box = document.querySelector(".input-box");
                box.classList.remove("focus");
                $("input").each(function () {
                var $input = $(this);
                var $parent = $input.closest(".input-box");
                if ($input.val()) $parent.addClass("focus");
                else $parent.removeClass("focus");
                });
            }
            }
</script>




<script>
  const yearSelect = document.getElementById("yearSelect");
  const allocationTable = document.getElementById("allocationTable");
  const showcurrent = document.getElementById("showcurr");

  yearSelect.addEventListener("change", () => {
    const year = yearSelect.value;
    const curyear =  new Date().getFullYear().toString();

    if(year === curyear) {
    fetch(`/Allocate/api/years/${year}`)
      .then((response) => response.json())
      .then((data) => {
        let tableHTML = "";
        data.forEach((allocation, index) => {
          tableHTML += `
            <tr>
              <td>${index + 1}</td>
              <td>${allocation.room_name}</td>
              <td>${allocation.block_name}</td>
              <td>${allocation.year}</td>
              <td>${allocation.student_name}</td>
              <td>${allocation.course}</td>
              <td>${allocation.sid}</td>
            </tr>
          `;

        });
        allocationTable.innerHTML = `
          <thead>
            <tr>
              <th>#</th>
              <th>Room</th>
              <th>Block</th>
              <th>Year</th>
              <th>Name</th>
              <th>Course</th>
              <th>Student SID</th>
            </tr>
          </thead>
          <tbody>${tableHTML}</tbody>
        `;
      })
      .catch((error) => console.error(error));
    } else {
      fetch(`/Allocate/api/years/${year}`)
      .then((response) => response.json())
      .then((data) => {
        let tableHTML = "";
        data.forEach((allocation, index) => {

          tableHTML += `
            <tr>
              <td>${index + 1}</td>
              <td>${allocation.room_name}</td>
              <td>${allocation.block_name}</td>
              <td>${allocation.year}</td>
              <td>${allocation.student_name}</td>
              <td>${allocation.course}</td>
              <td>${allocation.sid}</td>
            </tr>
          `;

        });
        allocationTable.innerHTML = `
          <thead>
            <tr>
              <th>#</th>
              <th>Room</th>
              <th>Block</th>
              <th>Year</th>
              <th>Name</th>
              <th>Course</th>
              <th>Student SID</th>
            </tr>
          </thead>
          <tbody>${tableHTML}</tbody>
        `;
      })
      .catch((error) => console.error(error));


    }
  });

</script>




   <script>
      document.getElementById('downloadBtn').addEventListener('click', () => {
        // Create an HTML string for the content you want in the PDF
        const html = `
          <html>
            <head>
              <style>
                /* Add your CSS styles here */
              </style>
            </head>
            <body>
              <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="table-responsive">
                  <%- include('./table.ejs') %>
                  <hr>
                  <br>
                </div>
              </div>
            </body>
          </html>
        `;

        // Encode the HTML content as Base64
        const encodedHtml = btoa(unescape(encodeURIComponent(html)));

        // Create a data URL for the encoded HTML
        const dataUrl = `data:text/html;base64,${encodedHtml}`;

        // Create a temporary link element
        // const link = document.createElement('a');
        // link.href = dataUrl;
        // link.download = 'output.pdf';

        // Programmatically click the link to trigger the download
        // link.click();

        // Cleanup
        // document.body.removeChild(link);
      });
    </script>
    <script>
      // Retrieve the necessary elements

      const descriptionElement = document.getElementById("descriptionElement");

      // Add an event listener to the select element
      yearSelect.addEventListener("change", () => {
        // Get the selected year
        const selectedYear = yearSelect.value;

        // Perform an asynchronous operation (e.g., fetch) to get the description
        fetch(`/year/api/years/${selectedYear}`)
          .then(response => response.json())
          .then(data => {
            console.log(data);
            // Update the description element with the retrieved description
            descriptionElement.textContent = data.Description;
          })
          .catch(error => {
            console.error("Error:", error);
          });
      });
    </script>



<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.2.2/html2canvas.min.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/pdfmake.min.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/vfs_fonts.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.6/jspdf.plugin.autotable.min.js"></script>

<!--  -->


<script>
 function exportPdf(){
            var selectedYear = document.getElementById("yearSelect").value;
            var pdf = new jsPDF();
            pdf.text(20,20,"Allocation Details for year " + selectedYear);
            pdf.autoTable({html:'#allocationTable',
                startY: 25,
                theme:'grid',
                columnStyles:{
                    0:{cellWidth:8},
                    1:{cellWidth:18},
                    2:{cellWidth:18},
                    3:{cellWidth:18},
                    4:{cellWidth:45},
                    5:{cellWidth:35},
                    6:{cellWidth:35},
                },
                bodyStyles: {lineColor: [1, 1, 1]},
                styles: {
                  lineColor: [0, 0, 0], // Set the line color to black
                  lineWidth: 0.1, // Adjust the line width as needed
                  fillColor: false, // Make the cells colorless
                  textColor: [0, 0, 0] // Set the text color to black
    }
            });
            // window.open(URL.createObjectURL(pdf.output("blob")))
            //window.open(pdf.output("bloburl"), "_blank");
	          pdf.save("table.pdf");

         }
</script>

</body>



</html>
